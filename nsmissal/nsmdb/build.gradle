buildscript {

  repositories {
    jcenter{url "http://jcenter.bintray.com/"}
    mavenLocal()
    maven { url "http://plugins.gradle.org/m2" }
  }
  dependencies {
    classpath "com.marklogic:ml-gradle:3.4.0"
    classpath "net.saliman:gradle-properties-plugin:1.4.6"
    classpath 'com.marklogic:marklogic-corb:2.4.1'
  }
}

plugins {
    id 'java'
    id 'net.saliman.properties' version '1.4.6'
    id 'com.marklogic.ml-gradle' version '3.4.0'
}

repositories {
  jcenter{url "http://jcenter.bintray.com/"}

  // Needed for mlcp dependencies
  maven { url "http://plugins.gradle.org/m2" }
  maven { url "http://developer.marklogic.com/maven2/" }

  // Needed for hadoop dependencies for mlcp
  maven { url "http://repository.cloudera.com/artifactory/cloudera-repos/" }
}

configurations {
  corb
  mlcp {
      resolutionStrategy {
        force "xml-apis:xml-apis:1.4.01"
      }
    }
}

dependencies {
  mlcp "com.marklogic:mlcp:9.0.6"
  mlcp "org.apache.commons:commons-csv:1.2"
  compile 'com.marklogic:marklogic-xcc:9.0.4'
  corb 'com.marklogic:marklogic-corb:2.4.1'
  mlcp files("lib")
}

task _ingestBible(type: com.marklogic.gradle.task.MlcpTask) {
  def projectDir = new File("${projectDir}")
  def gitDir = projectDir.getParentFile().getAbsolutePath()

  def dataDir = gitDir + "/data"
  def regex = '"' + dataDir + ",''"

  classpath = configurations.mlcp
  command = "IMPORT"
  host = mlHost
  port = mlAppServicesPort.toInteger()

  document_type = "json"
  input_file_path =  dataDir + "/bible/bible.csv"
  input_file_type ="delimited_text" 

  output_collections= "nsm,bibleChapter" 
  output_permissions= "rest-reader,read,rest-writer,update" 
  output_uri_prefix = "/nsm/bibleChapter"
  output_uri_suffix = ".json"
  output_uri_replace = regex
  generate_uri = "true"
  data_type = "biblicalOrder,number,chapter,number,verses,number"
}

task _organizeBible(type: com.marklogic.gradle.task.ServerEvalTask) {

def js = "'use strict';\n"
js += 'declareUpdate();'
js += 'const lib = require("/coverage.sjs");\n'
js += 'lib.organizeBible();\n'
  javascript = js;
}

task _cover(type: com.marklogic.gradle.task.ServerEvalTask) {

def js = "'use strict';\n"
js += 'declareUpdate();'
js += 'const lib = require("/coverage.sjs");\n'
js += 'lib.cover();\n'
  javascript = js;
}

task _linkMassesToReadings(type: com.marklogic.gradle.task.ServerEvalTask) {

def js = "'use strict';\n"
js += 'declareUpdate();'
js += 'const lib = require("/coverage.sjs");\n'
js += 'lib.linkMassesToReadings();\n'
  javascript = js;
}

task _buildCalendar(type: com.marklogic.gradle.task.ServerEvalTask) {
[]
def js = "'use strict';\n"
js += 'declareUpdate();'
js += 'const lib = require("/calendar.sjs");\n'
js += 'for (var y = 2012; y < 2050; y++) {lib.buildCalendar(y);}\n'
  javascript = js;
}

task _ingestMasses(type: com.marklogic.gradle.task.MlcpTask) {
  def projectDir = new File("${projectDir}")
  def gitDir = projectDir.getParentFile().getAbsolutePath()
  def dataDir = gitDir + "/data"
  def regex = '"' + dataDir + ",''"

  classpath = configurations.mlcp
  command = "IMPORT"
  host = mlHost
  port = mlAppServicesPort.toInteger()

  document_type = "json"
  input_file_path =  dataDir + "/masses"

  output_uri_prefix = "/nsm"
  output_uri_replace = regex
  output_collections= "nsm,masses" 
  output_permissions= "rest-reader,read,rest-writer,update" 
}

ext {
   // XCC URL for running corb task below
   contentXccUrl = "xcc://${mlUsername}:${mlPassword}@${mlHost}:${mlAppServicesPort}"
}
 
task _runCalendarReport(type: com.marklogic.gradle.task.CorbTask) {
  def cols = "ADVENT_YEAR,MASS,DATE"

  xccConnectionUri = contentXccUrl
  urisModule = "/corb/calendar/uris.sjs"
  processTask="com.marklogic.developer.corb.ExportBatchToFileTask"
  processModule = "/corb/calendar/process.sjs"
  batchSize="2"
  threadCount="8"
  exportFileName = "../data/reports/calendar.csv"
  preBatchTask="com.marklogic.developer.corb.PreBatchUpdateFileTask"
  exportFileTopContent=cols
}

task _runCoverageReport() {
}

task loadData() {
  dependsOn "_ingestMasses"
  dependsOn "_ingestBible"
  dependsOn "_organizeBible"
  dependsOn "_linkMassesToReadings"
  dependsOn "_buildCalendar"
  dependsOn "_cover"
  tasks.findByName('_organizeBible').mustRunAfter '_ingestBible'
  tasks.findByName('_cover').mustRunAfter '_organizeBible'
  tasks.findByName('_linkMassesToReadings').mustRunAfter '_ingestMasses'
  tasks.findByName('_buildCalendar').mustRunAfter '_linkMassesToReadings'
}

task runReports() {
  dependsOn "_runCalendarReport"
  dependsOn "_runCoverageReport"
}
