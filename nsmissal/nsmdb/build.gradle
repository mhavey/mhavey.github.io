
buildscript {

  repositories {
    jcenter{url "http://jcenter.bintray.com/"}
    mavenLocal()
    maven { url "http://plugins.gradle.org/m2" }
  }
  dependencies {
    classpath "com.marklogic:ml-gradle:3.4.0"
    classpath "net.saliman:gradle-properties-plugin:1.4.6"
  }
}

apply plugin: "net.saliman.properties"
apply plugin: "com.marklogic.ml-gradle"

repositories {
  jcenter{url "http://jcenter.bintray.com/"}

  // Needed for mlcp dependencies
  maven { url "http://plugins.gradle.org/m2" }
  maven { url "http://developer.marklogic.com/maven2/" }

  // Needed for hadoop dependencies for mlcp
  maven { url "http://repository.cloudera.com/artifactory/cloudera-repos/" }
}

configurations {
  // This configuration captures the dependencies for running mlcp (Content Pump). This is only needed if you want
  // to run mlcp via Gradle tasks. If you do, using com.marklogic.gradle.task.MlcpTask is a useful starting point, as
  // shown below.  Need to force to use certain version of xml-apis library.
  mlcp {
      resolutionStrategy {
        force "xml-apis:xml-apis:1.4.01"
      }
    }
}

dependencies {
  mlcp "com.marklogic:mlcp:9.0.6"
  mlcp "org.apache.commons:commons-csv:1.2"
  mlcp files("lib")
}

task _ingestBible(type: com.marklogic.gradle.task.MlcpTask) {
  def projectDir = new File("${projectDir}")
  def gitDir = projectDir.getParentFile().getAbsolutePath()

  def dataDir = gitDir + "/data"
  def regex = '"' + dataDir + ",''"

  classpath = configurations.mlcp
  command = "IMPORT"
  host = mlHost
  port = mlAppServicesPort.toInteger()

  document_type = "json"
  input_file_path =  dataDir + "/bible/bible.csv"
  input_file_type ="delimited_text" 

  output_collections= "nsm,bibleChapter" 
  output_permissions= "rest-reader,read,rest-writer,update" 
  output_uri_prefix = "/nsm/bibleChapter"
  output_uri_suffix = ".json"
  output_uri_replace = regex
  generate_uri = "true"
  data_type = "biblicalOrder,number,chapter,number,verses,number"

  transform_module="/coverage.sjs"
  transform_function="initCoverage"
  transform_param="dummy"
}

task _organizeBible(type: com.marklogic.gradle.task.ServerEvalTask) {

def js = "'use strict';\n"
js += 'declareUpdate();'
js += 'const lib = require("/coverage.sjs");\n'
js += 'lib.organizeBible();\n'
  javascript = js;
}

task _ingestMasses(type: com.marklogic.gradle.task.MlcpTask) {
  def projectDir = new File("${projectDir}")
  def gitDir = projectDir.getParentFile().getAbsolutePath()
  def dataDir = gitDir + "/data"
  def regex = '"' + dataDir + ",''"

  classpath = configurations.mlcp
  command = "IMPORT"
  host = mlHost
  port = mlAppServicesPort.toInteger()

  document_type = "json"
  input_file_path =  dataDir + "/masses"

  output_uri_prefix = "/nsm"
  output_uri_replace = regex
  output_collections= "nsm,masses" 
  output_permissions= "rest-reader,read,rest-writer,update" 

}

task _cover(type: com.marklogic.gradle.task.ServerEvalTask) {

def js = "'use strict';\n"
js += 'declareUpdate();'
js += 'const lib = require("/coverage.sjs");\n'
js += 'lib.cover();\n'
  javascript = js;
}

task loadData() {
  dependsOn "_ingestMasses"
  dependsOn "_ingestBible"
  dependsOn "_organizeBible"
  tasks.findByName('_organizeBible').mustRunAfter '_ingestBible'
}

task runReports() {
  dependsOn "_cover"
}
