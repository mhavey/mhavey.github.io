
buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
    }
    dependencies {
        //Needed for CorbTask to dynamically generate properties from CoRB Options class
        classpath "com.marklogic:marklogic-corb:${corbVersion}"
    }
}


plugins {
    id 'java'
    id "net.saliman.properties" version "1.5.2"
    id 'com.marklogic.ml-gradle' version "5.0.0"
}

repositories {
    mavenCentral()
}

configurations {
  corb
  mlcp {
    attributes {
      attribute(TargetJvmEnvironment.TARGET_JVM_ENVIRONMENT_ATTRIBUTE, objects.named(TargetJvmEnvironment.class, TargetJvmEnvironment.STANDARD_JVM))
    }
  }
}

dependencies {
    // required to run CoRB2
    corb "com.marklogic:marklogic-corb:${corbVersion}"
    // optional
    //corb 'org.jasypt:jasypt:1.9.2' // would be necessary to leverage JasyptDecrypter

  mlcp "com.marklogic:mlcp:11.3.0"

  // Since MLCP 11.2, have not been able to get logging to work via a log4j2.xml or
  // log4j2.properties file. MLCP 11.2 removed logback as a direct dependency. Adding it back
  // results in logging working correctly.
  mlcp "ch.qos.logback:logback-classic:1.3.14"

  /**
   * mlcp uses logback for logging, and without a logback configuration file, no MLCP logging will appear.
   * It is recommended then that your Gradle configuration for mlcp include a directory or some other resource that
   * provides a logback configuration file.
   */
  mlcp files("lib")
}

ext {
    // XCC URL for running corb task below
    contentXccUrl = "xcc://${mlUsername}:${mlPassword}@${mlHost}:${mlRestPort}"
}

task _ingestBible(type: com.marklogic.gradle.task.MlcpTask) {
  def projectDir = new File("${projectDir}")
  def gitDir = projectDir.getParentFile().getAbsolutePath()

  def dataDir = gitDir + "/data"
  def regex = '"' + dataDir + ",''"

  classpath = configurations.mlcp
  command = "IMPORT"
  host = mlHost
  port = mlAppServicesPort.toInteger()

  document_type = "json"
  input_file_path =  dataDir + "/bible/bible.csv"
  input_file_type ="delimited_text" 

  output_collections= "nsm,bibleChapter" 
  output_permissions= "rest-reader,read,rest-writer,update" 
  output_uri_prefix = "/nsm/bibleChapter"
  output_uri_suffix = ".json"
  output_uri_replace = regex
  generate_uri = "true"
  data_type = "biblicalOrder,number,chapter,number,verses,number"
}

task _organizeBible(type: com.marklogic.gradle.task.ServerEvalTask) {

def js = "'use strict';\n"
js += 'declareUpdate();'
js += 'const lib = require("/coverage.sjs");\n'
js += 'lib.organizeBible();\n'
  javascript = js;
}

task _cover(type: com.marklogic.gradle.task.ServerEvalTask) {

def js = "'use strict';\n"
js += 'declareUpdate();'
js += 'const lib = require("/coverage.sjs");\n'
js += 'lib.cover();\n'
  javascript = js;
}

task _linkMassesToReadings(type: com.marklogic.gradle.task.ServerEvalTask) {

def js = "'use strict';\n"
js += 'declareUpdate();'
js += 'const lib = require("/coverage.sjs");\n'
js += 'lib.linkMassesToReadings();\n'
  javascript = js;
}

task _buildCalendar(type: com.marklogic.gradle.task.ServerEvalTask) {
[]
def js = "'use strict';\n"
js += 'declareUpdate();'
js += 'const lib = require("/calendar.sjs");\n'
js += 'for (var y = 2012; y < 2050; y++) {lib.buildCalendar(y);}\n'
  javascript = js;
}

task _ingestMasses(type: com.marklogic.gradle.task.MlcpTask) {
  def projectDir = new File("${projectDir}")
  def gitDir = projectDir.getParentFile().getAbsolutePath()
  def dataDir = gitDir + "/data"
  def regex = '"' + dataDir + ",''"

  classpath = configurations.mlcp
  command = "IMPORT"
  host = mlHost
  port = mlAppServicesPort.toInteger()

  document_type = "json"
  input_file_path =  dataDir + "/masses"

  output_uri_prefix = "/nsm"
  output_uri_replace = regex
  output_collections= "nsm,masses" 
  output_permissions= "rest-reader,read,rest-writer,update" 
}

ext {
   // XCC URL for running corb task below
   contentXccUrl = "xcc://${mlUsername}:${mlPassword}@${mlHost}:${mlAppServicesPort}"
}
 
task _runCalendarReport(type: com.marklogic.gradle.task.CorbTask) {
  def cols = "ADVENT_YEAR,MASS,DATE"

  xccConnectionUri = contentXccUrl
  urisModule = "/corb/calendar/uris.sjs"
  processTask="com.marklogic.developer.corb.ExportBatchToFileTask"
  processModule = "/corb/calendar/process.sjs"
  batchSize="2"
  threadCount="8"
  exportFileName = "../data/reports/calendar.csv"
  preBatchTask="com.marklogic.developer.corb.PreBatchUpdateFileTask"
  exportFileTopContent=cols
}

task _runCoverageReport(type: com.marklogic.gradle.task.CorbTask) {
  def cols = "BOOK_ORDER,BOOK_ABBREV,BOOK,CHAPTER,VERSE,READING"

  xccConnectionUri = contentXccUrl
  urisModule = "/corb/coverage/uris.sjs"
  processTask="com.marklogic.developer.corb.ExportBatchToFileTask"
  processModule = "/corb/coverage/process.sjs"
  batchSize="2"
  threadCount="8"
  exportFileName = "../data/reports/coverage.csv"
  preBatchTask="com.marklogic.developer.corb.PreBatchUpdateFileTask"
  exportFileTopContent=cols
}

task loadData() {
  dependsOn "_ingestMasses"
  dependsOn "_ingestBible"
  dependsOn "_organizeBible"
  dependsOn "_linkMassesToReadings"
  dependsOn "_buildCalendar"
  dependsOn "_cover"
  tasks.findByName('_organizeBible').mustRunAfter '_ingestBible'
  tasks.findByName('_cover').mustRunAfter '_organizeBible'
  tasks.findByName('_linkMassesToReadings').mustRunAfter '_ingestMasses'
  tasks.findByName('_buildCalendar').mustRunAfter '_linkMassesToReadings'
}

task runReports() {
  dependsOn "_runCalendarReport"
  dependsOn "_runCoverageReport"
}
